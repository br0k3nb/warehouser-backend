import { Request, Response } from 'express';

import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

import User from "../models/User";

import "dotenv/config";

const SEVEN_DAYS_IN_MS = 604800000;

export default {
    async add(req: Request, res: Response) {
        try {
            const { name, email, password } = req.body;
            const userExists = await User.find({ email });

            if(userExists.length > 0) return res.status(400).json({ message: 'User already exists, please sign in!' });

            const hashedPassword = await bcrypt.hash(password, 10);
            
            await User.create({ 
                email, 
                password: hashedPassword, 
                name,
                settings: { 
                    noteTextExpanded: true,
                    theme: 'dark',
                }
            });

            res.status(200).json({ message: 'User created successfully!' });
        } catch (err) {
            res.status(400).json({ message: err });
        }
    },
    async login(req: Request, res: Response) {
        try {
            const { email, password } = req.body;
    
            const getUser = await User.find({ email });

            if(!getUser.length) {
                return res.status(400).json({ message: 'Wrong email or password combination!' });
            }

            const { _id, name, settings, googleAccount } = getUser[0];

            if(googleAccount) return res.status(400).json({ message: "The selected sign in method isn't available to this email!" });

            const passwordDB = getUser[0].password;
            const comparePasswords = await bcrypt.compare(password, passwordDB);

            if(comparePasswords) {
                const payload = {
                    iss: "login-form",
                    sub: { _id, name, googleAccount: false },
                    exp: Math.floor((Date.now() / 1000) + SEVEN_DAYS_IN_MS),
                };

                const token = jwt.sign(
                    payload, 
                    process.env.SECRET as string, 
                    { algorithm: 'HS512' }
                );

                return res.status(200).cookie('teste', JSON.stringify({ 
                    token, 
                    _id, 
                    name, 
                    settings,
                }), {
                    maxAge: 1000 * 60 * 15, // would expire after 15 minutes
                    httpOnly: true, // The cookie only accessible by the web server
                })
            }

            return res.status(404).json({ message: 'Wrong email or password combination!' });
        } catch (err) {
            console.log(err);
            res.status(400).json({ message: err });
        }
    },
    async googleLogin(req: Request, res: Response) {
        try {
            const { email, name, id, identifier } = req.body;

            const getUser = await User.find({ email });

            if(!getUser.length) {
                await User.create({ 
                    name, 
                    email, 
                    googleId: id, 
                    googleAccount: true,
                    settings: {
                        theme: 'dark',
                    }
                });

                const [ user ] = await User.find({ email }); //waiting to get the id generated by mongodb
                const { _id, googleAccount, settings, theme } = user;

                const payload = { 
                    iss: "login-form", 
                    sub: { _id, name, googleAccount }, 
                    exp: Math.floor(Date.now() / 1000 + SEVEN_DAYS_IN_MS) 
                };

                const token = jwt.sign(
                    payload,
                    process.env.SECRET as string,
                    { algorithm: 'HS512' }
                );

                return res.status(200).json({ 
                    message: 'Success', 
                    token, 
                    _id, 
                    name, 
                    googleAccount,
                    settings
                });
            }
            else if(!getUser[0]?.googleAccount) {
                return res.status(400).json({ message: 'User already exists, please sign in using your email and password!' });
            }
            else {
                const { _id, googleAccount, settings } = getUser[0];

                const payload = { 
                    iss: "login-form", 
                    sub: { _id, name, googleAccount }, 
                    exp: Math.floor(Date.now() / 1000 + SEVEN_DAYS_IN_MS) 
                };

                const token = jwt.sign( 
                    payload, 
                    process.env.SECRET as string, 
                    { algorithm: 'HS512' }
                );

                return res.status(200).json({ 
                    message: 'Success', 
                    token, 
                    _id, 
                    name, 
                    googleAccount,
                    settings 
                });
            }
        } catch (err) {
            console.log(err);
            return res.status(400).json({ message: err });
        }
    },
    async convertIntoNormalAccount(req: Request, res: Response) {
        try {
            const { _id, password } = req.body;
            const getUser = await User.find({ _id });

            if(getUser.length === 0) res.status(400).json({ message: 'User not found!' });

            else {
                const hashedPassword = await bcrypt.hash(password, 10);
                await User.findOneAndUpdate({ _id }, { 
                    password: hashedPassword, 
                    googleAccount: false 
                });

                res.status(200).json({ message: 'Account was converted, please sign in again!' });
            }
        } catch (err) {
            console.log(err);
            res.status(400).json({ message: err });
        }
    },
    async convertIntoGoogleAccount(req: Request, res: Response) {
        try {
            const { _id, email, name, id } = req.body;
            const getUser = await User.find({ _id });

            if(getUser.length === 0) res.status(400).json({ message: 'User not found!' });

            else {
                const userAlreadyExist = await User.find({ email });

                if(userAlreadyExist.length > 0 
                    && !userAlreadyExist[0].googleAccount 
                    && userAlreadyExist[0].email !== getUser[0].email
                ) return res.status(400).json({ message: 'User already exists!' });

                await User.findOneAndUpdate({ _id }, { 
                    password: null, 
                    googleAccount: true, 
                    googleId: id, 
                    name, 
                    email 
                });

                res.status(200).json({ message: 'Google account was linked, please sign in again!' });
            }
        } catch (err) {
            res.status(400).json({ message: err });
        }
    },
    async verifyUser(req: Request, res: Response) {
        try {
            const { password, _id } = req.body;
            const findUser = await User.findById({ _id });

            if(!findUser?._id) return res.status(400).json({ message: 'User not found!' });

            const userPassDB = findUser.password;
            const comparePass = await bcrypt.compare( password, userPassDB );

            if(comparePass) res.status(200).json({ message: 'Authenticated' });
            else res.status(400).json({ message: 'Wrong password, please try again!' });
        } catch (err) {
            console.log(err);
            res.status(400).json({ message: 'User not authenticated' });
        }
    },
    async changePassword(req: Request, res: Response) {
        try {
            const { userId, password } = req.body;
            const getUser = await User.find({ _id: userId });
            
            if(getUser.length === 0) return res.status(400).json({ message: 'User not found, please try again or later!' });

            const hashedPass = await bcrypt.hash(password, 10);
            await User.findOneAndUpdate({ _id: userId }, { password: hashedPass });

            res.status(200).json({ message: 'Password changed!'});
        } catch (err) {
           res.status(400).json({ message: err });
        }
    },
    async changeAppTheme(req: Request, res: Response) {
        try {
            const { id } = req.params;
            const { theme } = req.body;

            const getUserData = await User.findById(id);

            await User.findByIdAndUpdate({ _id: id }, {
                settings: {
                    ...getUserData.settings,
                    theme
                }
            });

            return res.status(200).json({ message: "Updated!" });
        } catch (err) {
            console.log(err);
            res.status(400).json({ message: err });
        }
    },
}